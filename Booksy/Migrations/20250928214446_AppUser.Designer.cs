// <auto-generated />
using System;
using Booksy.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Booksy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250928214446_AppUser")]
    partial class AppUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Booksy.Models.Entities.Books.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Author of Harry Potter",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(5301),
                            IsDeleted = false,
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Author of Game of Thrones",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(7182),
                            IsDeleted = false,
                            Name = "George R.R. Martin"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Author of The Lord of the Rings",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(7189),
                            IsDeleted = false,
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Famous mystery writer",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(7192),
                            IsDeleted = false,
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Horror and thriller author",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(7208),
                            IsDeleted = false,
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Author of Da Vinci Code",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(7228),
                            IsDeleted = false,
                            Name = "Dan Brown"
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Author of Hunger Games",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(7230),
                            IsDeleted = false,
                            Name = "Suzanne Collins"
                        },
                        new
                        {
                            Id = 8,
                            Bio = "American novelist",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(7233),
                            IsDeleted = false,
                            Name = "Ernest Hemingway"
                        },
                        new
                        {
                            Id = 9,
                            Bio = "Famous American writer",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(7235),
                            IsDeleted = false,
                            Name = "Mark Twain"
                        },
                        new
                        {
                            Id = 10,
                            Bio = "Science fiction author",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 52, DateTimeKind.Utc).AddTicks(7241),
                            IsDeleted = false,
                            Name = "Isaac Asimov"
                        });
                });

            modelBuilder.Entity("Booksy.Models.Entities.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Traffic")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 55, DateTimeKind.Utc).AddTicks(9104),
                            Discount = 0m,
                            ISBN = "9780747532699",
                            IsDeleted = false,
                            Price = 19.99m,
                            Quantity = 0,
                            Stock = 50,
                            Title = "Harry Potter and the Philosopher's Stone",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5329),
                            Discount = 0m,
                            ISBN = "9780747538493",
                            IsDeleted = false,
                            Price = 19.99m,
                            Quantity = 0,
                            Stock = 45,
                            Title = "Harry Potter and the Chamber of Secrets",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5349),
                            Discount = 0m,
                            ISBN = "9780553103540",
                            IsDeleted = false,
                            Price = 24.99m,
                            Quantity = 0,
                            Stock = 40,
                            Title = "A Game of Thrones",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5356),
                            Discount = 0m,
                            ISBN = "9780553108033",
                            IsDeleted = false,
                            Price = 24.99m,
                            Quantity = 0,
                            Stock = 35,
                            Title = "A Clash of Kings",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5361),
                            Discount = 0m,
                            ISBN = "9780385121675",
                            IsDeleted = false,
                            Price = 17.99m,
                            Quantity = 0,
                            Stock = 30,
                            Title = "The Shining",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 5,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5402),
                            Discount = 0m,
                            ISBN = "9780450411434",
                            IsDeleted = false,
                            Price = 18.99m,
                            Quantity = 0,
                            Stock = 25,
                            Title = "It",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5410),
                            Discount = 0m,
                            ISBN = "9780547928210",
                            IsDeleted = false,
                            Price = 22.99m,
                            Quantity = 0,
                            Stock = 40,
                            Title = "The Lord of the Rings: Fellowship",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 4,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5417),
                            Discount = 0m,
                            ISBN = "9780062073501",
                            IsDeleted = false,
                            Price = 14.99m,
                            Quantity = 0,
                            Stock = 30,
                            Title = "Murder on the Orient Express",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 6,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5472),
                            Discount = 0m,
                            ISBN = "9780307474278",
                            IsDeleted = false,
                            Price = 16.99m,
                            Quantity = 0,
                            Stock = 25,
                            Title = "The Da Vinci Code",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 7,
                            CategoryId = 14,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5483),
                            Discount = 0m,
                            ISBN = "9780439023481",
                            IsDeleted = false,
                            Price = 18.99m,
                            Quantity = 0,
                            Stock = 35,
                            Title = "The Hunger Games",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 7,
                            CategoryId = 14,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5490),
                            Discount = 0m,
                            ISBN = "9780439023498",
                            IsDeleted = false,
                            Price = 18.99m,
                            Quantity = 0,
                            Stock = 35,
                            Title = "Catching Fire",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 7,
                            CategoryId = 14,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5493),
                            Discount = 0m,
                            ISBN = "9780439023511",
                            IsDeleted = false,
                            Price = 18.99m,
                            Quantity = 0,
                            Stock = 35,
                            Title = "Mockingjay",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 10,
                            CategoryId = 14,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5496),
                            Discount = 0m,
                            ISBN = "9780553293357",
                            IsDeleted = false,
                            Price = 15.99m,
                            Quantity = 0,
                            Stock = 25,
                            Title = "Foundation",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 10,
                            CategoryId = 14,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5501),
                            Discount = 0m,
                            ISBN = "9780553294385",
                            IsDeleted = false,
                            Price = 15.99m,
                            Quantity = 0,
                            Stock = 25,
                            Title = "I, Robot",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 8,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5505),
                            Discount = 0m,
                            ISBN = "9780684801223",
                            IsDeleted = false,
                            Price = 12.99m,
                            Quantity = 0,
                            Stock = 20,
                            Title = "The Old Man and The Sea",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 9,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 56, DateTimeKind.Utc).AddTicks(5508),
                            Discount = 0m,
                            ISBN = "9780486280615",
                            IsDeleted = false,
                            Price = 11.99m,
                            Quantity = 0,
                            Stock = 20,
                            Title = "Adventures of Huckleberry Finn",
                            Traffic = 0
                        });
                });

            modelBuilder.Entity("Booksy.Models.Entities.Books.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 50, DateTimeKind.Utc).AddTicks(8118),
                            IsDeleted = false,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(462),
                            IsDeleted = false,
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(470),
                            IsDeleted = false,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(472),
                            IsDeleted = false,
                            Name = "Children"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(475),
                            IsDeleted = false,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(498),
                            IsDeleted = false,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(501),
                            IsDeleted = false,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(506),
                            IsDeleted = false,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(509),
                            IsDeleted = false,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(515),
                            IsDeleted = false,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(520),
                            IsDeleted = false,
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(550),
                            IsDeleted = false,
                            Name = "History"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(555),
                            IsDeleted = false,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 51, DateTimeKind.Utc).AddTicks(557),
                            IsDeleted = false,
                            Name = "Science Fiction"
                        });
                });

            modelBuilder.Entity("Booksy.Models.Entities.Books.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Comment = "Loved this book!",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 58, DateTimeKind.Utc).AddTicks(47),
                            IsDeleted = false,
                            Rating = 5,
                            Status = 1,
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            Comment = "Great story.",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 58, DateTimeKind.Utc).AddTicks(4689),
                            IsDeleted = false,
                            Rating = 4,
                            Status = 1,
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 5,
                            Comment = "Terrifying but amazing.",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 58, DateTimeKind.Utc).AddTicks(4699),
                            IsDeleted = false,
                            Rating = 5,
                            Status = 1,
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 10,
                            Comment = "Could not put it down!",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 58, DateTimeKind.Utc).AddTicks(4706),
                            IsDeleted = false,
                            Rating = 5,
                            Status = 1,
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 7,
                            Comment = "Classic fantasy!",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 58, DateTimeKind.Utc).AddTicks(4712),
                            IsDeleted = false,
                            Rating = 5,
                            Status = 1,
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 13,
                            Comment = "Interesting sci-fi.",
                            CreatedAt = new DateTime(2025, 9, 28, 21, 44, 44, 58, DateTimeKind.Utc).AddTicks(4737),
                            IsDeleted = false,
                            Rating = 4,
                            Status = 1,
                            UserId = "00000000-0000-0000-0000-000000000003"
                        });
                });

            modelBuilder.Entity("Booksy.Models.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Orders.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CarrierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CarrierTrackingId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Promotions.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Promotions.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Promotions.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("ReceiveNewsletter")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ThemePreference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12d00e07-676f-4164-abee-2826302446d6",
                            Email = "admin@booksy.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "System Admin",
                            NormalizedEmail = "ADMIN@BOOKSY.COM",
                            NormalizedUserName = "ADMIN@BOOKSY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDtbeFEqBEYegxhJil3L1ZTLPtC9k3rHe8MQdbEGPl8yCtNgtyGM1rJp/S4U2Z56ng==",
                            PhoneNumberConfirmed = false,
                            PreferredLanguage = "en",
                            ReceiveNewsletter = true,
                            RegisteredDate = new DateTime(2025, 9, 28, 21, 44, 43, 701, DateTimeKind.Utc).AddTicks(9723),
                            SecurityStamp = "6a43a8cf-1700-4119-8d83-112082a0d30e",
                            TwoFactorEnabled = false,
                            UserName = "admin@booksy.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a00dbdc-510c-4664-b51c-ae4bd2b1e926",
                            Email = "customer1@booksy.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "Alice",
                            NormalizedEmail = "CUSTOMER1@BOOKSY.COM",
                            NormalizedUserName = "CUSTOMER1@BOOKSY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELBhze3CZob2mgzWAaIYu6cuMOaerE3MWifT41W3+WXYIW0lY91lsrEuYGHLFgBEow==",
                            PhoneNumberConfirmed = false,
                            PreferredLanguage = "en",
                            ReceiveNewsletter = true,
                            RegisteredDate = new DateTime(2025, 9, 28, 21, 44, 43, 812, DateTimeKind.Utc).AddTicks(7094),
                            SecurityStamp = "c51ae7ce-c3a5-4b01-9270-f3c4c83e612c",
                            TwoFactorEnabled = false,
                            UserName = "customer1@booksy.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2f91d1a-4c1b-42ae-97a2-7ee913a2064a",
                            Email = "customer2@booksy.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "Bob",
                            NormalizedEmail = "CUSTOMER2@BOOKSY.COM",
                            NormalizedUserName = "CUSTOMER2@BOOKSY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsERPYFsD67V5hnU550r01VEZ/8hGvPLFMQgmkAhfDwGlYTNYZY0897jjsaMfV/xA==",
                            PhoneNumberConfirmed = false,
                            PreferredLanguage = "en",
                            ReceiveNewsletter = true,
                            RegisteredDate = new DateTime(2025, 9, 28, 21, 44, 43, 914, DateTimeKind.Utc).AddTicks(6573),
                            SecurityStamp = "a3788f1c-ef84-4718-9669-8057abb976a7",
                            TwoFactorEnabled = false,
                            UserName = "customer2@booksy.com"
                        });
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.UserOTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OTPNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserOTPs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Booksy.Models.Entities.Books.Book", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Books.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Booksy.Models.Entities.Books.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Booksy.Models.Entities.Promotions.Promotion", null)
                        .WithMany("Books")
                        .HasForeignKey("PromotionId");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Books.Review", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Books.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booksy.Models.Entities.Users.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Orders.Order", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Users.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Books.Book", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booksy.Models.Entities.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Orders.Shipment", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Orders.Order", "Order")
                        .WithOne("Shipment")
                        .HasForeignKey("Booksy.Models.Entities.Orders.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Promotions.Coupon", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Promotions.Promotion", "Promotion")
                        .WithMany("Coupons")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Promotions.Discount", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("Booksy.Models.Entities.Promotions.Promotion", "Promotion")
                        .WithMany("Discounts")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.Cart", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Users.ApplicationUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.CartItem", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booksy.Models.Entities.Users.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.UserOTP", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Users.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booksy.Models.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Booksy.Models.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booksy.Models.Entities.Books.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Books.Book", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Books.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Promotions.Promotion", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Coupons");

                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.ApplicationUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Booksy.Models.Entities.Users.Cart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
